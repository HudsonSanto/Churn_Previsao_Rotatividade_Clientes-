import streamlit as st
import pandas as pd
import plotly.express as px
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, balanced_accuracy_score
import numpy as np




# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Churn Prediction em Telecomunica√ß√µes",
    page_icon="üì°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal
st.title("üì° Churn Prediction em Telecomunica√ß√µes")
st.markdown("""
**Da an√°lise preditiva √† a√ß√£o estrat√©gica**  
*Uma jornada de dados para reter clientes e otimizar resultados*
""")

# Sidebar com informa√ß√µes
st.sidebar.header("Painel de Navega√ß√£o")
st.sidebar.info("""
**Navegue pelo storytelling completo**:
1. üé¨ A Jornada dos Dados
2. üìä An√°lise Completa
3. üîç Insights do Modelo
4. üöÄ Plano de A√ß√£o
""")

def navigate_to_tab(tab_index):
    st.session_state.current_tab = tab_index
# Divis√£o em abas
tab0, tab1, tab2, tab3 = st.tabs([
    "üé¨ A Jornada dos Dados", 
    "üìä An√°lise Completa", 
    "üîç Insights do Modelo", 
    "üöÄ Plano de A√ß√£o"
])

# Carregar dados
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/HudsonSanto/Churn_Previsao_Rotatividade_Clientes-/main/arquivo/Dataset_Churn_Telecomunicacoes"
    df = pd.read_csv(url)
    df = df[df['TotalCharges'] != ' ']
    df['TotalCharges'] = df['TotalCharges'].astype(float)
    df.replace({'No internet service': 'No', 'No phone service': 'No'}, inplace=True)
    return df

df = load_data()

with tab0:
    st.header("üé¨ A Jornada dos Dados: Do Problema √† Solu√ß√£o")
    
    st.markdown("""
    ### üåå O Desafio Inicial
    
    Em um mercado competitivo de telecomunica√ß√µes, onde **a aquisi√ß√£o de novos clientes custa 5x mais** do que reter os existentes,
    nossa empresa enfrentava um problema cr√≠tico: **26.5% dos clientes cancelavam seus servi√ßos** anualmente, sem que pud√©ssemos prever ou prevenir.
    """)
    
    st.image("https://images.unsplash.com/photo-1551434678-e076c223a692?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80",
            caption="O desafio da reten√ß√£o em um mercado competitivo")
    
    st.markdown("""
    ### üîç A Descoberta dos Dados
    
    Com um dataset completo de **7.043 clientes** e **21 vari√°veis** comportamentais e demogr√°ficas, iniciamos nossa investiga√ß√£o:
    """)
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Vari√°veis Analisadas", "21")
    with col2:
        st.metric("Clientes no Estudo", "7.043")
    with col3:
        st.metric("Taxa de Churn Inicial", "26.5%")
    
    st.markdown("""
    ### üß† O Poder da An√°lise Preditiva
    
    **Nossa abordagem cient√≠fica**:
    1. **Explora√ß√£o profunda** dos padr√µes ocultos nos dados
    2. **Teste de m√∫ltiplos algoritmos** de machine learning
    3. **Valida√ß√£o rigorosa** das previs√µes
    4. **Tradu√ß√£o em a√ß√µes** concretas
    
    *"Os dados n√£o mentem, mas precisamos fazer as perguntas certas"* - Equipe de Ci√™ncia de Dados
    """)
    
    st.markdown("""
    ### üèÜ O Modelo Vencedor
    
    Ap√≥s testar diversas abordagens, a **Regress√£o Log√≠stica** se destacou:
    """)
    
    model_performance = pd.DataFrame({
        "Modelo": ["Regress√£o Log√≠stica", "Random Forest", "SVM"],
        "Acur√°cia": [0.777, 0.732, 0.713],
        "Recall": [0.820, 0.764, 0.803]
    })
    
    # Corre√ß√£o: Destacar Regress√£o Log√≠stica como vencedora
    st.dataframe(
        model_performance.style.apply(
            lambda x: ['background-color: #2ecc71' if x.name == 0 else '' for i in x],
            axis=1
        ).format({
            "Acur√°cia": "{:.3f}",
            "Recall": "{:.3f}"
        }),
        use_container_width=True
    )
    
    st.markdown("""
    ### üìå Insights Transformadores
    
    **Padr√µes reveladores que mudaram nossa estrat√©gia**:
    - Contratos mensais t√™m **3x mais churn** que anuais
    - Cobran√ßas >$70/m√™s aumentam risco em **40%**
    - Suporte t√©cnico reduz churn em **25%**
    
    *"O conhecimento sem a√ß√£o √© apenas informa√ß√£o perdida"* - Nosso Lema
    """)

with tab1:
    st.header("üìä An√°lise Completa dos Dados")
    
    # Container 1: M√©tricas Gerais
    with st.container():
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total de Clientes", len(df))
        with col2:
            st.metric("Clientes Ativos", f"{len(df[df['Churn']=='No']):,}")
        with col3:
            st.metric("Taxa de Churn", f"{df['Churn'].value_counts(normalize=True)['Yes']*100:.1f}%")
        st.markdown("""
        **Conclus√£o**: A base cont√©m **7.043 clientes** com taxa de churn de **26.5%**, indicando desbalanceamento significativo entre as classes.
        Necess√°rio uso de t√©cnicas especiais como SMOTE para tratamento.
        """)
    
    # Container 2: Distribui√ß√£o de Churn
    with st.container():
        st.subheader("Distribui√ß√£o de Churn")
        fig = px.pie(df, names='Churn', color_discrete_sequence=['#2ecc71', '#e74c3c'],
                    labels={'Churn': 'Status'})
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("""
        **An√°lise**: Distribui√ß√£o desbalanceada (73.5% reten√ß√£o vs 26.5% churn).  
        **Impacto**: Modelos tendem a favorecer a classe majorit√°ria, requerendo balanceamento.
        """)
    
    # Container 3: Churn por Contrato
    with st.container():
        st.subheader("Churn por Tipo de Contrato")
        contract_churn = df.groupby(['Contract', 'Churn']).size().unstack()
        contract_churn['Churn_Rate'] = contract_churn['Yes'] / contract_churn.sum(axis=1) * 100
        fig = px.bar(contract_churn, x=contract_churn.index, y='Churn_Rate',
                    color_discrete_sequence=['#e74c3c'],
                    labels={'Churn_Rate': 'Taxa de Churn (%)'})
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("""
        **Insight**: Contratos mensais t√™m **42.7% de churn** vs 11.3% (anual) e 2.8% (bienal).  
        **Recomenda√ß√£o**: Incentivar migra√ß√£o para contratos longos com benef√≠cios progressivos.
        """)
    
    # Container 4: Tempo de Assinatura
    with st.container():
        st.subheader("Rela√ß√£o entre Tempo de Assinatura e Churn")
        fig = px.box(df, x='Churn', y='tenure', color='Churn',
                   color_discrete_sequence=['#2ecc71', '#e74c3c'],
                   labels={'tenure': 'Meses como Cliente'})
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("""
        **Padr√£o**: Mediana de 10 meses para churn vs 38 meses para clientes fi√©is.  
        **A√ß√£o**: Focar esfor√ßos de reten√ß√£o nos primeiros 12 meses.
        """)
    
    # Container 5: Cobran√ßa Mensal
    with st.container():
        st.subheader("Rela√ß√£o entre Valores Cobrados e Churn")
        fig = px.box(df, x='Churn', y='MonthlyCharges', color='Churn',
                   color_discrete_sequence=['#2ecc71', '#e74c3c'],
                   labels={'MonthlyCharges': 'Valor Mensal ($)'})
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("""
        **An√°lise**: Clientes que cancelam pagam em m√©dia **$74.31/m√™s** vs **$61.27/m√™s** dos ativos.  
        **Hip√≥tese**: Planos premium podem n√£o estar entregando valor proporcional ao pre√ßo.
        """)
    
    # Container 6: Servi√ßos Adicionais
    with st.container():
        st.subheader("Impacto de Servi√ßos Adicionais no Churn")
        
        services = ['OnlineSecurity', 'TechSupport', 'InternetService']
        for service in services:
            service_churn = df.groupby([service, 'Churn']).size().unstack()
            service_churn['Churn_Rate'] = service_churn['Yes'] / service_churn.sum(axis=1) * 100
            fig = px.bar(service_churn, x=service_churn.index, y='Churn_Rate',
                        color_discrete_sequence=['#e74c3c'],
                        title=f'Churn por {service}',
                        labels={'Churn_Rate': 'Taxa de Churn (%)'})
            st.plotly_chart(fig, use_container_width=True)
            
            if service == 'OnlineSecurity':
                st.markdown("""
                **Seguran√ßa Online**: Taxa de 41.6% sem vs 15.4% com seguran√ßa.  
                **Implica√ß√£o**: Servi√ßo essencial para reten√ß√£o.
                """)
            elif service == 'TechSupport':
                st.markdown("""
                **Suporte T√©cnico**: Redu√ß√£o de 40.8% para 20.6% com suporte.  
                **Estrat√©gia**: Incluir suporte b√°sico em todos os planos.
                """)
            else:
                st.markdown("""
                **Internet Service**: Fibra √≥ptica tem 41.9% churn vs DSL 19.2%.  
                **Investiga√ß√£o**: Verificar qualidade da fibra √≥ptica.
                """)
    
    # Container 7: An√°lise de Total Charges
    with st.container():
        st.subheader("Distribui√ß√£o de Gastos Totais")
        fig = px.box(df, x='Churn', y='TotalCharges', color='Churn',
                   color_discrete_sequence=['#2ecc71', '#e74c3c'],
                   labels={'TotalCharges': 'Gasto Total ($)'})
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("""
        **Observa√ß√£o**: Clientes fi√©is t√™m gasto total significativamente maior (mediana $1.467 vs $412).  
        **Interpreta√ß√£o**: Quanto mais tempo o cliente permanece, maior seu valor vital√≠cio (LTV).
        """)
    
    # Container 8: Forma de Pagamento
    with st.container():
        st.subheader("Churn por M√©todo de Pagamento")
        payment_churn = df.groupby(['PaymentMethod', 'Churn']).size().unstack()
        payment_churn['Churn_Rate'] = payment_churn['Yes'] / payment_churn.sum(axis=1) * 100
        fig = px.bar(payment_churn, x=payment_churn.index, y='Churn_Rate',
                    color_discrete_sequence=['#e74c3c'],
                    labels={'Churn_Rate': 'Taxa de Churn (%)'})
        st.plotly_chart(fig, use_container_width=True)
        st.markdown("""
        **Destaque**: Cheque eletr√¥nico tem 33.5% churn vs 10.4% em pagamentos autom√°ticos.  
        **A√ß√£o**: Incentivar migra√ß√£o para pagamento autom√°tico com benef√≠cios.
        """)

with tab2:
    st.header("üîç Insights do Modelo Preditivo")
    
    # Pr√©-processamento para o modelo
    @st.cache_data
    def prepare_model_data():
        df_model = df.copy()
        le = LabelEncoder()
        df_model['Churn'] = le.fit_transform(df_model['Churn'])
        df_model['SeniorCitizen'] = le.fit_transform(df_model['SeniorCitizen'])
        cat_cols = df_model.select_dtypes(include=['object']).columns
        return pd.get_dummies(df_model, columns=cat_cols, drop_first=True)
    
    df_model = prepare_model_data()
    
    # Treinar modelo
    @st.cache_resource
    def train_model():
        X = df_model.drop('Churn', axis=1)
        y = df_model['Churn']
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.25, stratify=y, random_state=42
        )
        smote = SMOTE(random_state=42)
        X_res, y_res = smote.fit_resample(X_train, y_train)
        model = LogisticRegression(
            C=0.1, class_weight='balanced', max_iter=200, solver='liblinear', random_state=42
        )
        return model.fit(X_res, y_res), X_test, y_test
    
    model, X_test, y_test = train_model()
    
    # M√©tricas
    st.subheader("Performance do Modelo")
    y_pred = model.predict(X_test)
    
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("**Principais M√©tricas**")
        report = classification_report(y_test, y_pred, output_dict=True)
        metrics = {
            'Acur√°cia Balanceada': balanced_accuracy_score(y_test, y_pred),
            'Precis√£o': report['1']['precision'],
            'Recall': report['1']['recall'],
            'F1-Score': report['1']['f1-score']
        }
        st.table(pd.DataFrame.from_dict(metrics, orient='index', columns=['Valor']).style.format('{:.3f}'))
    
    with col2:
        st.markdown("**Matriz de Confus√£o**")
        conf_matrix = pd.crosstab(y_test, y_pred, rownames=['Real'], colnames=['Previsto'], normalize='index')
        fig = px.imshow(
            conf_matrix.values*100,
            labels=dict(x="Previsto", y="Real", color="%"),
            x=['N√£o Churn', 'Churn'],
            y=['N√£o Churn', 'Churn'],
            text_auto=".1f",
            color_continuous_scale='Blues'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    st.subheader("Vari√°veis Mais Importantes")
    importance = pd.DataFrame({
        'Vari√°vel': model.feature_names_in_,
        'Import√¢ncia': model.coef_[0]
    }).sort_values('Import√¢ncia', key=abs, ascending=False).head(10)
    
    fig = px.bar(importance, x='Import√¢ncia', y='Vari√°vel', orientation='h',
                title='Top 10 Fatores que Influenciam o Churn')
    st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.header("üöÄ Plano de A√ß√£o Estrat√©gico")
    
    st.subheader("Principais Fatores de Churn e A√ß√µes Recomendadas")
    
    st.markdown("""
    ### üéØ Foco em Contratos Mensais
    **Problema**: 43% dos clientes com contrato mensal cancelam  
    **Solu√ß√£o**:  
    - Programa de migra√ß√£o para contratos anuais com benef√≠cios progressivos  
    - Desconto de 15% no primeiro ano para quem migrar  
    """)
    
    st.markdown("""
    ### üõ°Ô∏è Servi√ßos de Suporte
    **Problema**: Clientes sem suporte t√©cnico t√™m 3x mais churn  
    **Solu√ß√£o**:  
    - Pacote "Seguran√ßa Total" inclu√≠do nos primeiros 6 meses  
    - Alertas proativos de problemas  
    """)
    
    st.markdown("""
    ### üí≥ M√©todos de Pagamento
    **Problema**: Cheques eletr√¥nicos t√™m 2x mais churn  
    **Solu√ß√£o**:  
    - Programa "Pagamento Autom√°tico" com 5% de desconto  
    - B√¥nus de fidelidade para pagamentos recorrentes  
    """)
    
    st.subheader("Cronograma de Implementa√ß√£o")
    
    timeline = pd.DataFrame({
        "M√™s": ["1¬∫ M√™s", "2¬∫ M√™s", "3¬∫ M√™s"],
        "A√ß√£o": [
            "Lan√ßamento programa migra√ß√£o contratos",
            "Implementa√ß√£o pacote seguran√ßa para novos clientes",
            "Campanha pagamento autom√°tico"
        ],
        "Meta": [
            "Reduzir churn mensal em 15%",
            "Aumentar reten√ß√£o em 20% nos primeiros 6 meses",
            "Aumentar ades√£o pagamento autom√°tico para 40%"
        ]
    })
    
    st.table(timeline.style.set_properties(**{'text-align': 'left'}))
    
    st.subheader("Pr√≥ximos Passos")
    st.markdown("""
    1. **Valida√ß√£o** com equipe comercial e marketing  
    2. **Testes A/B** para medir efic√°cia das a√ß√µes  
    3. **Monitoramento cont√≠nuo** dos resultados  
    """)
    
    st.download_button(
        "üì• Baixar Plano Completo",
        data=timeline.to_csv(index=False).encode('utf-8'),
        file_name="plano_acao_churn.csv",
        mime="text/csv"
    )

# Rodap√©
st.markdown("---")
st.markdown("""
**Desenvolvido por** **Hudson Santos** - [LinkedIn](https://www.linkedin.com/in/hudson-santos-513230218/)  
[Github](https://github.com/HudsonSanto)
""")